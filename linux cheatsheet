hello this is my LINUX cheatsheet that i grab during my learning in TRYHACKME and OVERTHEWIRE


# Linux SOC Triage Cheatsheet

This document serves as a quick reference for fundamental Linux commands used during initial system triage, log analysis, and incident response, compiled from practical exercises (TryHackMe, OverTheWire).

---

## 1. System Triage & Status (What is it doing *now*?)

These commands check the immediate health, processes, and network activity on a potentially compromised host.

| Command | Syntax | Explanation / SOC Use Case |
| :--- | :--- | :--- |
| `ps` | `ps aux` | **List ALL processes** (all users, full format). Look for unexpected owners or long-running processes. |
| `top` | `top` | **Real-time system monitor** (CPU, memory). Identifies resource spikes that could indicate malicious activity (e.g., coin miners). |
| `netstat` | `netstat -tuln` | **List all listening network sockets** (`-t` TCP, `-u` UDP, `-l` listening, `-n` numeric). Check for unauthorized open ports (back-doors or CnC waiting). |
| `ss` | `ss -tuln` | **Faster, modern alternative to netstat.** Analysts often prefer this for quick triage. |
| `ip` | `ip addr` | **View the host's IP address** and network interface configurations. |
| `last` | `last` | **View a history of recent user logins/logouts.** Look for remote logins outside of business hours or from suspicious IPs. |
| `df` | `df -h` | **Display Free disk space** (human-readable). Used to check for disk-filling malware or large data exfiltration caches. |

---

## 2. File and Log Analysis (Hunting)

These commands are used for searching for artifacts, filtering logs, and identifying the contents of complex files.

| Command | Syntax | Explanation / OTW/SOC Practice |
| :--- | :--- | :--- |
| **Search** | `find / -name filename` | Search the entire system (from root `/`) for a specific file by name. (OTW Level 5) |
| | `find . -user username` | Find files owned by a specific user. Critical for investigating compromised accounts. |
| **Permissions**| `ls -l` | **View detailed file permissions** (e.g., `-rwx r-- r--`). Look for improper permissions set on critical files. |
| **Filtering** | `grep "ERROR" file.log` | **Search** for a specific string or pattern within a file (e.g., a malware signature or error code). |
| **Uniqueness** | `sort file.txt | uniq -u` | **Find unique lines** (`-u`) in a file after sorting. Used to count unique connections or filter noise. (OTW Level 8) |
| **Metadata** | `file [filename]` | Determines the **type of a file** (e.g., ASCII text, ELF executable). Essential before opening. |
| **Viewing** | `tail -f file.log` | **Stream the output** of a log file in real-time. |

---

## 3. Advanced Decoding & Obfuscation

Utilities for handling encoded or manipulated data, commonly seen in initial malware droppers or command outputs.

| Command | Syntax | Explanation / OTW/SOC Practice |
| :--- | :--- | :--- |
| **Base64 Decode**| `base64 -d file.txt` | **Decodes a Base64-encoded file** (often used to hide scripts or payloads). (OTW Level 10) |
| **Strings** | `strings data_file` | **Extracts all printable character strings** from binary data (used in early-stage forensic analysis). (OTW Level 9) |
| **Translation** | `echo "..." | tr 'A-Z' 'N-Z'` | **Translate/substitute characters** in a stream. Used to reverse simple ciphers like ROT13. (OTW Level 11) |
| **Error Handling** | `command 2> /dev/null` | **Redirects Standard Error (`2`) to null**, effectively suppressing error messages and keeping output clean. (OTW Level 6) |
